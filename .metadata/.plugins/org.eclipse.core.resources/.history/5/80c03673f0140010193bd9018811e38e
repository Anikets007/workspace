package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dto.TicketDto;
import com.example.demo.entity.Passenger;
import com.example.demo.entity.Ticket;
import com.example.demo.entity.TicketStatus;
import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.repository.PassengerRepository;
import com.example.demo.repository.TicketRepository;

@Service
public class TicketServiceImpl implements TicketService {

	@Autowired
	TicketRepository ticketRepository;

	@Autowired
	PassengerRepository passRepository;

	@Override
	public void bookTicket(TicketDto ticketDto) {

		Ticket ticket = new Ticket();
		ticket.setSource(ticketDto.getSource());
		ticket.setDestination(ticket.getDestination());
		ticket.setTrainNumber(ticketDto.getTrainNumber());
		
		//Check if the passenger exist
	Passenger passenger =	passRepository.findByName(ticketDto.getPassengerName());
	
	if(passenger == null) {
		passenger = new Passenger();
		passenger.setName(ticketDto.getPassengerName());
		
		passRepository.save(passenger);
	}
	ticket.setPassenger(passenger);// Attach passenger to a ticket
	
	if(ticketDto.getSource().equalsIgnoreCase(ticketDto.getDestination())) {
		ticket.setStatus(TicketStatus.FAILED); // Same source & fail
	}else {
		ticket.setStatus(TicketStatus.BOOKED); // Else booked 
	}
		ticketRepository.save(ticket);
	}

	@Override
	public void cancelTicket(Long ticketId) {

		Ticket ticket = ticketRepository.findById(ticketId).orElse(null);
	
		if(ticket == null) {
			throw new ResourceNotFoundException("Ticket not found with ticket ID :"+ticketId);
		}
		
		ticketRepository.deleteById(ticketId);
		
	}

	@Override
	public Ticket getTicketStatus(Long ticketId) {

		Ticket ticket = ticketRepository.findById(ticketId).orElse(null);
		if(ticket == null) {
			throw new ResourceNotFoundException("Ticket not found with ID :"+ticketId);
		}
		return ticket;
	}

	@Override
	public List<TicketDto> getAllTickets() {

		List<Ticket> tickets = ticketRepository.findAll();
		List<TicketDto> ticketDtos = new ArrayList<>();
		//Covert each Ticket entity to TicketDto 
		for(Ticket ticket:tickets) {
			TicketDto dto = new TicketDto();
			dto.setId(ticket.getId());
			dto.setSource(ticket.getSource());
			dto.setDestination(ticket.getDestination());
			dto.setTrainNumber(ticket.getTrainNumber());
			
			if(ticket.getPassenger()! == null) {
				dto.setPassengerId(ticket.get);
			}
		}
		
		dto.setStatus()
		return null;
	}

}
